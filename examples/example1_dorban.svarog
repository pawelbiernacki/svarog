#!svarog

values
{
	value false, true, none;
	value place_Wyzima, place_Novigrad, place_Shadizar;
	value ask_pregor_to_follow_dorban, attack_vampire;
	value goto_Wyzima, goto_Novigrad, goto_Shadizar;
}

variables
{
	input variable has_dorban_won_a_fight:{false, true, none};
	input variable where_is_dorban:{place_Wyzima, place_Novigrad, place_Shadizar};
	input variable can_dorban_see_pregor:{false, true};
	input variable can_dorban_see_vampire:{false, true};
	
	input variable is_pregor_following_dorban:{false, true};
	
	hidden variable where_is_vampire:{place_Wyzima, place_Novigrad, place_Shadizar};
	hidden variable where_is_pregor:{place_Wyzima, place_Novigrad, place_Shadizar};
	
	output variable optimal_action:{ask_pregor_to_follow_dorban, attack_vampire, goto_Wyzima, goto_Novigrad, goto_Shadizar};
}

knowledge
{	
	function is_initially_in(variable where_is_x, value town)
	{
		if (initial value where_is_x == town)
		{
			return true;
		}
		return false;
	}
	
	function is_terminally_in(variable where_is_x, value town)
	{
		if (terminal value where_is_x == town)
		{
			return true;
		}
		return false;
	}
	
	function is_initially_equal(variable where_is_x, variable where_is_y)
	{
		if (initial value where_is_x == initial value where_is_y)
		{
			return true;
		}
		return false;
	}
	
	impossible "dorban and pregor are in different towns yet pregor is following dorban" {
		requires not initial value where_is_dorban == initial value where_is_pregor;
		requires initial value is_pregor_following_dorban == true;
	}
	
	impossible "dorban and pregor are in the same town yet dorban cannot see pregor" {
		requires initial value where_is_dorban == initial value where_is_pregor;
		requires initial value can_dorban_see_pregor == false;
	}
	
	impossible "dorban and pregor are in different towns yet dorban can see pregor" {
		requires not initial value where_is_dorban == initial value where_is_pregor;
		requires initial value can_dorban_see_pregor == true;
	}
	
	impossible "dorban and vampire are in the same town yet dorban cannot see vampire" {
		requires initial value where_is_dorban == initial value where_is_vampire;
		requires initial value can_dorban_see_vampire == false;
	}
	
	impossible "dorban and vampire are in different towns yet dorban can see vampire" {
		requires not initial value where_is_dorban == initial value where_is_vampire;
		requires initial value can_dorban_see_vampire == true;
	}
	
	payoff "payoff for winning a fight":100.0 {
		requires initial value has_dorban_won_a_fight == true;
	}
	payoff "payoff for loosing a fight":0.0 {
		requires initial value has_dorban_won_a_fight == false;
	}
	payoff "neutral payoff":50.0 {
		requires initial value has_dorban_won_a_fight == none;
	}
	

	action {optimal_action=>ask_pregor_to_follow_dorban}:{
	
		case "dorban meets pregor and asks him to follow him" {
			requires initial value can_dorban_see_pregor==true;
			requires initial value where_is_dorban == initial value where_is_pregor;
			
			probability "pregor is now following dorban" : 0.5 {
				requires terminal value is_pregor_following_dorban == true;
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value has_dorban_won_a_fight == none;
				requires initial value can_dorban_see_vampire == terminal value can_dorban_see_vampire;
				requires terminal value can_dorban_see_pregor == true;
			}
		
			probability "pregor is not willing to follow dorban" : 0.5 {
				requires terminal value is_pregor_following_dorban == false;
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value has_dorban_won_a_fight == none;
				requires initial value can_dorban_see_vampire == terminal value can_dorban_see_vampire;
				requires terminal value can_dorban_see_pregor == true;
			}
		}
		
		case "dorban does not see pregor" {
			requires initial value can_dorban_see_pregor==false;
			illegal;
		}
	}
	
	action {optimal_action=>attack_vampire}:{
	
		case "there is no vampire to attack" {
			requires initial value can_dorban_see_vampire==false;
			illegal;
			}
	
		case "dorban with pregor attack vampire" {
			requires initial value can_dorban_see_pregor==true;
			requires initial value can_dorban_see_vampire==true;
			requires initial value is_pregor_following_dorban==true;
	
			probability "dorban with pregor succesfully attack the vampire" : 0.75{
				requires terminal value has_dorban_won_a_fight==true;
				
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value can_dorban_see_vampire == true;
				requires terminal value can_dorban_see_pregor ==true;
				requires terminal value is_pregor_following_dorban==true;
			}
		
			probability "dorban with pregor fail to win with the vampire, pregor quits dorban": 0.25{
				requires terminal value has_dorban_won_a_fight==false;
				requires terminal value is_pregor_following_dorban==false;

				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value can_dorban_see_vampire == true;
				requires terminal value can_dorban_see_pregor ==true;
			}
		}
		
		case "dorban alone attacks vampire" {
			requires initial value can_dorban_see_vampire==true;
			requires initial value is_pregor_following_dorban==false;
			
			probability "dorban alone succesfully attacks the vampire" :0.25{
				requires terminal value has_dorban_won_a_fight==true;
				
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value is_pregor_following_dorban==false;
				requires terminal value can_dorban_see_vampire==true;
				
				requires terminal value can_dorban_see_pregor==is_initially_equal(where_is_dorban, where_is_pregor);
			}
		
			probability "dorban alone fails to win with the vampire" :0.75{
				requires terminal value has_dorban_won_a_fight==false;
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires initial value where_is_dorban == terminal value where_is_dorban;
				requires initial value where_is_pregor == terminal value where_is_pregor;
				requires terminal value is_pregor_following_dorban==false;
				requires terminal value can_dorban_see_vampire==true;
				requires terminal value can_dorban_see_pregor==is_initially_equal(where_is_dorban, where_is_pregor);
			}
		}
	}
	
	action {optimal_action=>goto_Novigrad}: {
		case "dorban goes to Novigrad but he is already there" {
			requires initial value where_is_dorban==place_Novigrad;
			illegal;
		}
		
		case "dorban with pregor go to Novigrad" {
			requires not initial value where_is_dorban==place_Novigrad;
			requires initial value is_pregor_following_dorban==true;
			requires initial value can_dorban_see_pregor==true;

			probability "dorban with pregor go to Novigrad" : 1.00{
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Novigrad;
				requires terminal value where_is_pregor==place_Novigrad;
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==true;
				requires terminal value can_dorban_see_pregor==true;
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Novigrad);
			}
		}

		case "dorban alone goes to Novigrad" {
			requires not initial value where_is_dorban==place_Novigrad;
			requires initial value is_pregor_following_dorban==false;
			
			probability "dorban alone is going to Novigrad" : 1.00 {
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Novigrad;
				requires terminal value can_dorban_see_pregor==is_initially_in(where_is_pregor, place_Novigrad);
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Novigrad);
				requires initial value where_is_vampire == terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==false;
				requires initial value where_is_pregor == terminal value where_is_pregor;
			}
		}

	}
	
	action {optimal_action=>goto_Shadizar}: {
		case "dorban goes to Shadizar but he is already there" {
			requires initial value where_is_dorban==place_Shadizar;
			illegal;
		}
		
		case "dorban with pregor go to Shadizar" {
			requires not initial value where_is_dorban==place_Shadizar;
			requires initial value is_pregor_following_dorban==true;
			requires initial value can_dorban_see_pregor==true;
			
			probability "dorban with pregor go to Shadizar":1.00 {
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Shadizar;
				requires terminal value where_is_pregor==place_Shadizar;
				requires initial value where_is_vampire==terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==true;
				requires terminal value can_dorban_see_pregor==true;
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Shadizar);
			}
		}
		
		case "dorban alone goes to Shadizar" {
			requires not(initial value where_is_dorban==place_Shadizar);
			requires initial value is_pregor_following_dorban==false;
			
			probability "dorban alone is going to Shadizar":1.00 {
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Shadizar;
				requires terminal value can_dorban_see_pregor==is_initially_in(where_is_pregor, place_Shadizar);
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Shadizar);
				requires initial value where_is_pregor==terminal value where_is_pregor;
				requires initial value where_is_vampire==terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==false;
				requires initial value where_is_pregor == terminal value where_is_pregor;
			}
		}
	}
	
	action {optimal_action=>goto_Wyzima}: {
		case "dorban goes to Wyzima but he is already there" {
			requires initial value where_is_dorban==place_Wyzima;
			illegal;
		}
		
		case "dorban with pregor go to Wyzima" {
			requires not initial value where_is_dorban==place_Wyzima;
			requires initial value is_pregor_following_dorban==true;
			requires initial value can_dorban_see_pregor==true;
			
			probability "dorban with pregor go to Wyzima":1.00 {
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Wyzima;
				requires terminal value where_is_pregor==place_Wyzima;
				requires initial value where_is_vampire==terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==true;
				requires terminal value can_dorban_see_pregor==true;
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Wyzima);
			}
		}
		
		case "dorban alone goes to Wyzima" {
			requires not(initial value where_is_dorban==place_Wyzima);
			requires initial value is_pregor_following_dorban==false;
			
			probability "dorban alone is going to Wyzima":1.00 {
				requires terminal value has_dorban_won_a_fight==none;
				requires terminal value where_is_dorban==place_Wyzima;
				requires terminal value can_dorban_see_pregor==is_initially_in(where_is_pregor, place_Wyzima);
				requires terminal value can_dorban_see_vampire==is_initially_in(where_is_vampire, place_Wyzima);
				requires initial value where_is_pregor==terminal value where_is_pregor;
				requires initial value where_is_vampire==terminal value where_is_vampire;
				requires terminal value is_pregor_following_dorban==false;
				requires initial value where_is_pregor == terminal value where_is_pregor;
			}
		}
	}
}

#test();
#test({where_is_vampire=>place_Shadizar,where_is_pregor=>place_Shadizar,has_dorban_won_a_fight=>none, 
#where_is_dorban=>place_Shadizar,can_dorban_see_pregor=>true,can_dorban_see_vampire=>true, 
#is_pregor_following_dorban=>true});

#test({where_is_vampire=>place_Novigrad,where_is_pregor=>place_Novigrad,has_dorban_won_a_fight=>false,
#where_is_dorban=>place_Wyzima,can_dorban_see_pregor=>false,can_dorban_see_vampire=>false,
#is_pregor_following_dorban=>false});

#test({where_is_vampire=>place_Wyzima,where_is_pregor=>place_Novigrad,has_dorban_won_a_fight=>false, #where_is_dorban=>place_Wyzima,can_dorban_see_pregor=>false,can_dorban_see_vampire=>true, #is_pregor_following_dorban=>false});

loop(4);

#cout << knowledge << eol;
#cout << visible states << eol;
#cout << states << eol;
#cout << perkun << eol;
