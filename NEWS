version 0.0.7
	Now much bigger specifications should be allowed, since we do not
	populate the visible states with all possible states in the beginning.
	Instead the states are generated when a visible state is "considered".

version 0.0.6:
	There are four Perl scripts added:
	- svarog_generate_control_shell.pl
	- svarog_generate_merge_shell.pl
	- svarog_generate_precalculate_shell.pl
	- svarog_generate_precalculate_tasks.pl
	
	They can be used to parallelize the precalculations for a given Svarog 
	specification.
	

version 0.0.5:
	There is a new program: svarog-merge. It takes two filenames as arguments:
	
	svarog-merge <file1> <file2>
	

	It merges the precalculated knowledge (provided it has the same depth and granularity).
	All entries "on visible state" present in file2 but not in file1 are added.
	Then it prints out the result specification (without the commands) to the standard output.
	
	
	svarog has a new command:
	
	cout << precalculate(depth,granularity,{...}) << eol;
	
	with {...} being a query describing a visible state.
	It works like normal precalculate but does the calculations for the given visible state only. The results can be merged with the svarog-merge tool.

version 0.0.4:
	svarog has a new command:

	cout << precalculate(depth,granularity) << eol;

	It is creating a Svarog specification containing precalculated knowledge
	and printing it out to the standard output.
	The depth is the "intelligence level" (the game tree depth) - just like in the loop command.
	Granularity is the amount of probability values for a single state in the belief, it should
	be small (2 is a good choice). It must not be 1 or smaller.
	
	After parsing a specification with the precalculated knowledge Svarog
	will be able to use it as a cache.

	If the amount of the beliefs after the discretization of the belief set exceeds 1024
	then the visible state is marked as "too complex" and not considered in the precalculations.
	Each visible state is checked individually, its impossible states are not taken into account when doing the precalculations.
	
